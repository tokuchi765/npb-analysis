// Code generated by MockGen. DO NOT EDIT.
// Source: reader.go

// Package mock_reader is a generated GoMock package.
package mock_reader

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	player "github.com/tokuchi765/npb-analysis/entity/player"
	team "github.com/tokuchi765/npb-analysis/entity/team"
)

// MockTeamReader is a mock of TeamReader interface.
type MockTeamReader struct {
	ctrl     *gomock.Controller
	recorder *MockTeamReaderMockRecorder
}

// MockTeamReaderMockRecorder is the mock recorder for MockTeamReader.
type MockTeamReaderMockRecorder struct {
	mock *MockTeamReader
}

// NewMockTeamReader creates a new mock instance.
func NewMockTeamReader(ctrl *gomock.Controller) *MockTeamReader {
	mock := &MockTeamReader{ctrl: ctrl}
	mock.recorder = &MockTeamReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamReader) EXPECT() *MockTeamReaderMockRecorder {
	return m.recorder
}

// ReadManager mocks base method.
func (m *MockTeamReader) ReadManager(csvPath, teamID, year string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadManager", csvPath, teamID, year)
	ret0, _ := ret[0].(string)
	return ret0
}

// ReadManager indicates an expected call of ReadManager.
func (mr *MockTeamReaderMockRecorder) ReadManager(csvPath, teamID, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadManager", reflect.TypeOf((*MockTeamReader)(nil).ReadManager), csvPath, teamID, year)
}

// ReadTeamBatting mocks base method.
func (m *MockTeamReader) ReadTeamBatting(csvPath, league, year string) []team.TeamBatting {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTeamBatting", csvPath, league, year)
	ret0, _ := ret[0].([]team.TeamBatting)
	return ret0
}

// ReadTeamBatting indicates an expected call of ReadTeamBatting.
func (mr *MockTeamReaderMockRecorder) ReadTeamBatting(csvPath, league, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTeamBatting", reflect.TypeOf((*MockTeamReader)(nil).ReadTeamBatting), csvPath, league, year)
}

// ReadTeamExchangeStats mocks base method.
func (m *MockTeamReader) ReadTeamExchangeStats(csvPath, league, year string) []team.TeamMatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTeamExchangeStats", csvPath, league, year)
	ret0, _ := ret[0].([]team.TeamMatchResults)
	return ret0
}

// ReadTeamExchangeStats indicates an expected call of ReadTeamExchangeStats.
func (mr *MockTeamReaderMockRecorder) ReadTeamExchangeStats(csvPath, league, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTeamExchangeStats", reflect.TypeOf((*MockTeamReader)(nil).ReadTeamExchangeStats), csvPath, league, year)
}

// ReadTeamLeagueStats mocks base method.
func (m *MockTeamReader) ReadTeamLeagueStats(csvPath, league, year string) ([]team.TeamLeagueStats, []team.TeamMatchResults) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTeamLeagueStats", csvPath, league, year)
	ret0, _ := ret[0].([]team.TeamLeagueStats)
	ret1, _ := ret[1].([]team.TeamMatchResults)
	return ret0, ret1
}

// ReadTeamLeagueStats indicates an expected call of ReadTeamLeagueStats.
func (mr *MockTeamReaderMockRecorder) ReadTeamLeagueStats(csvPath, league, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTeamLeagueStats", reflect.TypeOf((*MockTeamReader)(nil).ReadTeamLeagueStats), csvPath, league, year)
}

// ReadTeamPitching mocks base method.
func (m *MockTeamReader) ReadTeamPitching(csvPath, league, year string) []team.TeamPitching {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTeamPitching", csvPath, league, year)
	ret0, _ := ret[0].([]team.TeamPitching)
	return ret0
}

// ReadTeamPitching indicates an expected call of ReadTeamPitching.
func (mr *MockTeamReaderMockRecorder) ReadTeamPitching(csvPath, league, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTeamPitching", reflect.TypeOf((*MockTeamReader)(nil).ReadTeamPitching), csvPath, league, year)
}

// MockGradesReader is a mock of GradesReader interface.
type MockGradesReader struct {
	ctrl     *gomock.Controller
	recorder *MockGradesReaderMockRecorder
}

// MockGradesReaderMockRecorder is the mock recorder for MockGradesReader.
type MockGradesReaderMockRecorder struct {
	mock *MockGradesReader
}

// NewMockGradesReader creates a new mock instance.
func NewMockGradesReader(ctrl *gomock.Controller) *MockGradesReader {
	mock := &MockGradesReader{ctrl: ctrl}
	mock.recorder = &MockGradesReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGradesReader) EXPECT() *MockGradesReaderMockRecorder {
	return m.recorder
}

// GetPlayers mocks base method.
func (m *MockGradesReader) GetPlayers(csvPath, initial, year string) [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayers", csvPath, initial, year)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetPlayers indicates an expected call of GetPlayers.
func (mr *MockGradesReaderMockRecorder) GetPlayers(csvPath, initial, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayers", reflect.TypeOf((*MockGradesReader)(nil).GetPlayers), csvPath, initial, year)
}

// ReadCareer mocks base method.
func (m *MockGradesReader) ReadCareer(csvPath, initial, playerID, playerName string) (player.CAREER, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCareer", csvPath, initial, playerID, playerName)
	ret0, _ := ret[0].(player.CAREER)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReadCareer indicates an expected call of ReadCareer.
func (mr *MockGradesReaderMockRecorder) ReadCareer(csvPath, initial, playerID, playerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCareer", reflect.TypeOf((*MockGradesReader)(nil).ReadCareer), csvPath, initial, playerID, playerName)
}

// ReadGrades mocks base method.
func (m *MockGradesReader) ReadGrades(csvPath, initial, playerID, playerName string) ([]player.PICHERGRADES, []player.BATTERGRADES, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGrades", csvPath, initial, playerID, playerName)
	ret0, _ := ret[0].([]player.PICHERGRADES)
	ret1, _ := ret[1].([]player.BATTERGRADES)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ReadGrades indicates an expected call of ReadGrades.
func (mr *MockGradesReaderMockRecorder) ReadGrades(csvPath, initial, playerID, playerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGrades", reflect.TypeOf((*MockGradesReader)(nil).ReadGrades), csvPath, initial, playerID, playerName)
}
