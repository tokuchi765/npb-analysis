// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	player "github.com/tokuchi765/npb-analysis/entity/player"
	team "github.com/tokuchi765/npb-analysis/entity/team"
)

// MockSyastemRepository is a mock of SyastemRepository interface.
type MockSyastemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSyastemRepositoryMockRecorder
}

// MockSyastemRepositoryMockRecorder is the mock recorder for MockSyastemRepository.
type MockSyastemRepositoryMockRecorder struct {
	mock *MockSyastemRepository
}

// NewMockSyastemRepository creates a new mock instance.
func NewMockSyastemRepository(ctrl *gomock.Controller) *MockSyastemRepository {
	mock := &MockSyastemRepository{ctrl: ctrl}
	mock.recorder = &MockSyastemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyastemRepository) EXPECT() *MockSyastemRepositoryMockRecorder {
	return m.recorder
}

// GetSystemSetting mocks base method.
func (m *MockSyastemRepository) GetSystemSetting(setting string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemSetting", setting)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSystemSetting indicates an expected call of GetSystemSetting.
func (mr *MockSyastemRepositoryMockRecorder) GetSystemSetting(setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemSetting", reflect.TypeOf((*MockSyastemRepository)(nil).GetSystemSetting), setting)
}

// SetSystemSetting mocks base method.
func (m *MockSyastemRepository) SetSystemSetting(setting, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSystemSetting", setting, value)
}

// SetSystemSetting indicates an expected call of SetSystemSetting.
func (mr *MockSyastemRepositoryMockRecorder) SetSystemSetting(setting, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSystemSetting", reflect.TypeOf((*MockSyastemRepository)(nil).SetSystemSetting), setting, value)
}

// MockGradesRepository is a mock of GradesRepository interface.
type MockGradesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGradesRepositoryMockRecorder
}

// MockGradesRepositoryMockRecorder is the mock recorder for MockGradesRepository.
type MockGradesRepositoryMockRecorder struct {
	mock *MockGradesRepository
}

// NewMockGradesRepository creates a new mock instance.
func NewMockGradesRepository(ctrl *gomock.Controller) *MockGradesRepository {
	mock := &MockGradesRepository{ctrl: ctrl}
	mock.recorder = &MockGradesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGradesRepository) EXPECT() *MockGradesRepositoryMockRecorder {
	return m.recorder
}

// ExtractionBatterGrades mocks base method.
func (m *MockGradesRepository) ExtractionBatterGrades(batterMap *map[string][]player.BATTERGRADES, teamID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExtractionBatterGrades", batterMap, teamID)
}

// ExtractionBatterGrades indicates an expected call of ExtractionBatterGrades.
func (mr *MockGradesRepositoryMockRecorder) ExtractionBatterGrades(batterMap, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractionBatterGrades", reflect.TypeOf((*MockGradesRepository)(nil).ExtractionBatterGrades), batterMap, teamID)
}

// ExtractionCareers mocks base method.
func (m *MockGradesRepository) ExtractionCareers(careers *[]player.CAREER) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExtractionCareers", careers)
}

// ExtractionCareers indicates an expected call of ExtractionCareers.
func (mr *MockGradesRepositoryMockRecorder) ExtractionCareers(careers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractionCareers", reflect.TypeOf((*MockGradesRepository)(nil).ExtractionCareers), careers)
}

// ExtractionPicherGrades mocks base method.
func (m *MockGradesRepository) ExtractionPicherGrades(picherMap *map[string][]player.PICHERGRADES, teamID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExtractionPicherGrades", picherMap, teamID)
}

// ExtractionPicherGrades indicates an expected call of ExtractionPicherGrades.
func (mr *MockGradesRepositoryMockRecorder) ExtractionPicherGrades(picherMap, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractionPicherGrades", reflect.TypeOf((*MockGradesRepository)(nil).ExtractionPicherGrades), picherMap, teamID)
}

// GetBattings mocks base method.
func (m *MockGradesRepository) GetBattings(playerID string) []player.BATTERGRADES {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBattings", playerID)
	ret0, _ := ret[0].([]player.BATTERGRADES)
	return ret0
}

// GetBattings indicates an expected call of GetBattings.
func (mr *MockGradesRepositoryMockRecorder) GetBattings(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBattings", reflect.TypeOf((*MockGradesRepository)(nil).GetBattings), playerID)
}

// GetCareer mocks base method.
func (m *MockGradesRepository) GetCareer(playerID string) player.CAREER {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCareer", playerID)
	ret0, _ := ret[0].(player.CAREER)
	return ret0
}

// GetCareer indicates an expected call of GetCareer.
func (mr *MockGradesRepositoryMockRecorder) GetCareer(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCareer", reflect.TypeOf((*MockGradesRepository)(nil).GetCareer), playerID)
}

// GetPitchings mocks base method.
func (m *MockGradesRepository) GetPitchings(playerID string) []player.PICHERGRADES {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPitchings", playerID)
	ret0, _ := ret[0].([]player.PICHERGRADES)
	return ret0
}

// GetPitchings indicates an expected call of GetPitchings.
func (mr *MockGradesRepositoryMockRecorder) GetPitchings(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPitchings", reflect.TypeOf((*MockGradesRepository)(nil).GetPitchings), playerID)
}

// GetPlayersByTeamIDAndYear mocks base method.
func (m *MockGradesRepository) GetPlayersByTeamIDAndYear(teamID, year string) []player.PLAYER {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayersByTeamIDAndYear", teamID, year)
	ret0, _ := ret[0].([]player.PLAYER)
	return ret0
}

// GetPlayersByTeamIDAndYear indicates an expected call of GetPlayersByTeamIDAndYear.
func (mr *MockGradesRepositoryMockRecorder) GetPlayersByTeamIDAndYear(teamID, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayersByTeamIDAndYear", reflect.TypeOf((*MockGradesRepository)(nil).GetPlayersByTeamIDAndYear), teamID, year)
}

// InsertBatterGrades mocks base method.
func (m *MockGradesRepository) InsertBatterGrades(playerID string, batterGrades player.BATTERGRADES) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertBatterGrades", playerID, batterGrades)
}

// InsertBatterGrades indicates an expected call of InsertBatterGrades.
func (mr *MockGradesRepositoryMockRecorder) InsertBatterGrades(playerID, batterGrades interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBatterGrades", reflect.TypeOf((*MockGradesRepository)(nil).InsertBatterGrades), playerID, batterGrades)
}

// InsertCareers mocks base method.
func (m *MockGradesRepository) InsertCareers(careers []player.CAREER) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertCareers", careers)
}

// InsertCareers indicates an expected call of InsertCareers.
func (mr *MockGradesRepositoryMockRecorder) InsertCareers(careers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCareers", reflect.TypeOf((*MockGradesRepository)(nil).InsertCareers), careers)
}

// InsertPicherGrades mocks base method.
func (m *MockGradesRepository) InsertPicherGrades(key string, picher player.PICHERGRADES) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertPicherGrades", key, picher)
}

// InsertPicherGrades indicates an expected call of InsertPicherGrades.
func (mr *MockGradesRepositoryMockRecorder) InsertPicherGrades(key, picher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPicherGrades", reflect.TypeOf((*MockGradesRepository)(nil).InsertPicherGrades), key, picher)
}

// InsertTeamPlayers mocks base method.
func (m *MockGradesRepository) InsertTeamPlayers(teamID, teamName string, players [][]string, year string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertTeamPlayers", teamID, teamName, players, year)
}

// InsertTeamPlayers indicates an expected call of InsertTeamPlayers.
func (mr *MockGradesRepositoryMockRecorder) InsertTeamPlayers(teamID, teamName, players, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTeamPlayers", reflect.TypeOf((*MockGradesRepository)(nil).InsertTeamPlayers), teamID, teamName, players, year)
}

// SearchCareerByName mocks base method.
func (m *MockGradesRepository) SearchCareerByName(name string) []player.CAREER {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCareerByName", name)
	ret0, _ := ret[0].([]player.CAREER)
	return ret0
}

// SearchCareerByName indicates an expected call of SearchCareerByName.
func (mr *MockGradesRepositoryMockRecorder) SearchCareerByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCareerByName", reflect.TypeOf((*MockGradesRepository)(nil).SearchCareerByName), name)
}

// MockTeamRepository is a mock of TeamRepository interface.
type MockTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRepositoryMockRecorder
}

// MockTeamRepositoryMockRecorder is the mock recorder for MockTeamRepository.
type MockTeamRepositoryMockRecorder struct {
	mock *MockTeamRepository
}

// NewMockTeamRepository creates a new mock instance.
func NewMockTeamRepository(ctrl *gomock.Controller) *MockTeamRepository {
	mock := &MockTeamRepository{ctrl: ctrl}
	mock.recorder = &MockTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRepository) EXPECT() *MockTeamRepositoryMockRecorder {
	return m.recorder
}

// GetTeamBattingByTeamIDAndYear mocks base method.
func (m *MockTeamRepository) GetTeamBattingByTeamIDAndYear(teamID, year string) team.TeamBatting {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamBattingByTeamIDAndYear", teamID, year)
	ret0, _ := ret[0].(team.TeamBatting)
	return ret0
}

// GetTeamBattingByTeamIDAndYear indicates an expected call of GetTeamBattingByTeamIDAndYear.
func (mr *MockTeamRepositoryMockRecorder) GetTeamBattingByTeamIDAndYear(teamID, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamBattingByTeamIDAndYear", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamBattingByTeamIDAndYear), teamID, year)
}

// GetTeamBattingMax mocks base method.
func (m *MockTeamRepository) GetTeamBattingMax() (int, float64, float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamBattingMax")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(float64)
	return ret0, ret1, ret2
}

// GetTeamBattingMax indicates an expected call of GetTeamBattingMax.
func (mr *MockTeamRepositoryMockRecorder) GetTeamBattingMax() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamBattingMax", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamBattingMax))
}

// GetTeamBattingMin mocks base method.
func (m *MockTeamRepository) GetTeamBattingMin() (int, float64, float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamBattingMin")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(float64)
	return ret0, ret1, ret2
}

// GetTeamBattingMin indicates an expected call of GetTeamBattingMin.
func (mr *MockTeamRepositoryMockRecorder) GetTeamBattingMin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamBattingMin", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamBattingMin))
}

// GetTeamBattings mocks base method.
func (m *MockTeamRepository) GetTeamBattings(years []int) map[string][]team.TeamBatting {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamBattings", years)
	ret0, _ := ret[0].(map[string][]team.TeamBatting)
	return ret0
}

// GetTeamBattings indicates an expected call of GetTeamBattings.
func (mr *MockTeamRepositoryMockRecorder) GetTeamBattings(years interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamBattings", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamBattings), years)
}

// GetTeamName mocks base method.
func (m *MockTeamRepository) GetTeamName(teamID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamName", teamID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTeamName indicates an expected call of GetTeamName.
func (mr *MockTeamRepositoryMockRecorder) GetTeamName(teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamName", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamName), teamID)
}

// GetTeamPitchingByTeamIDAndYear mocks base method.
func (m *MockTeamRepository) GetTeamPitchingByTeamIDAndYear(year, teamID string) team.TeamPitching {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamPitchingByTeamIDAndYear", year, teamID)
	ret0, _ := ret[0].(team.TeamPitching)
	return ret0
}

// GetTeamPitchingByTeamIDAndYear indicates an expected call of GetTeamPitchingByTeamIDAndYear.
func (mr *MockTeamRepositoryMockRecorder) GetTeamPitchingByTeamIDAndYear(year, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamPitchingByTeamIDAndYear", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamPitchingByTeamIDAndYear), year, teamID)
}

// GetTeamPitchingMax mocks base method.
func (m *MockTeamRepository) GetTeamPitchingMax() (float64, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamPitchingMax")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetTeamPitchingMax indicates an expected call of GetTeamPitchingMax.
func (mr *MockTeamRepositoryMockRecorder) GetTeamPitchingMax() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamPitchingMax", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamPitchingMax))
}

// GetTeamPitchingMin mocks base method.
func (m *MockTeamRepository) GetTeamPitchingMin() (float64, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamPitchingMin")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetTeamPitchingMin indicates an expected call of GetTeamPitchingMin.
func (mr *MockTeamRepositoryMockRecorder) GetTeamPitchingMin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamPitchingMin", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamPitchingMin))
}

// GetTeamPitchings mocks base method.
func (m *MockTeamRepository) GetTeamPitchings(years []int) map[string][]team.TeamPitching {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamPitchings", years)
	ret0, _ := ret[0].(map[string][]team.TeamPitching)
	return ret0
}

// GetTeamPitchings indicates an expected call of GetTeamPitchings.
func (mr *MockTeamRepositoryMockRecorder) GetTeamPitchings(years interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamPitchings", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamPitchings), years)
}

// GetTeamStats mocks base method.
func (m *MockTeamRepository) GetTeamStats(years []int) map[string][]team.TeamLeagueStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamStats", years)
	ret0, _ := ret[0].(map[string][]team.TeamLeagueStats)
	return ret0
}

// GetTeamStats indicates an expected call of GetTeamStats.
func (mr *MockTeamRepositoryMockRecorder) GetTeamStats(years interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamStats", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamStats), years)
}

// InsertMatchResults mocks base method.
func (m *MockTeamRepository) InsertMatchResults(teamMatchResults []team.TeamMatchResults) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertMatchResults", teamMatchResults)
}

// InsertMatchResults indicates an expected call of InsertMatchResults.
func (mr *MockTeamRepositoryMockRecorder) InsertMatchResults(teamMatchResults interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMatchResults", reflect.TypeOf((*MockTeamRepository)(nil).InsertMatchResults), teamMatchResults)
}

// InsertPythagoreanExpectation mocks base method.
func (m *MockTeamRepository) InsertPythagoreanExpectation(teamBattings []team.TeamBatting, teamPitchings []team.TeamPitching) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertPythagoreanExpectation", teamBattings, teamPitchings)
}

// InsertPythagoreanExpectation indicates an expected call of InsertPythagoreanExpectation.
func (mr *MockTeamRepositoryMockRecorder) InsertPythagoreanExpectation(teamBattings, teamPitchings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPythagoreanExpectation", reflect.TypeOf((*MockTeamRepository)(nil).InsertPythagoreanExpectation), teamBattings, teamPitchings)
}

// InsertTeamBattings mocks base method.
func (m *MockTeamRepository) InsertTeamBattings(teamBatting team.TeamBatting) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertTeamBattings", teamBatting)
}

// InsertTeamBattings indicates an expected call of InsertTeamBattings.
func (mr *MockTeamRepositoryMockRecorder) InsertTeamBattings(teamBatting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTeamBattings", reflect.TypeOf((*MockTeamRepository)(nil).InsertTeamBattings), teamBatting)
}

// InsertTeamLeagueStats mocks base method.
func (m *MockTeamRepository) InsertTeamLeagueStats(teamLeagueStats []team.TeamLeagueStats) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertTeamLeagueStats", teamLeagueStats)
}

// InsertTeamLeagueStats indicates an expected call of InsertTeamLeagueStats.
func (mr *MockTeamRepositoryMockRecorder) InsertTeamLeagueStats(teamLeagueStats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTeamLeagueStats", reflect.TypeOf((*MockTeamRepository)(nil).InsertTeamLeagueStats), teamLeagueStats)
}

// InsertTeamPitchings mocks base method.
func (m *MockTeamRepository) InsertTeamPitchings(teamPitching team.TeamPitching) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertTeamPitchings", teamPitching)
}

// InsertTeamPitchings indicates an expected call of InsertTeamPitchings.
func (mr *MockTeamRepositoryMockRecorder) InsertTeamPitchings(teamPitching interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTeamPitchings", reflect.TypeOf((*MockTeamRepository)(nil).InsertTeamPitchings), teamPitching)
}
